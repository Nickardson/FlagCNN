{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","tf","require","names","App","pickColor","e","pd","ctx2","getImageData","offsetX","offsetY","data","x","handleClick","button","old","shiftKey","ctx","bool","handleRelease","model","img","Image","canvas","toDataURL","drawImage","imgData","w","h","browser","fromPixels","resizeBilinear","reshape","index","predict","dataSync","reduce","iMax","i","arr","console","log","setState","guess","draw","fillStyle","fillRect","Math","floor","boxSize","state","this","loadModel","flag","prevX","currX","prevY","currY","dot_flag","y","weights","document","getElementById","getContext","canvas2","width","height","addEventListener","angle","startAngle","PI","endAngle","beginPath","moveTo","arc","closePath","fill","buildPath","loadLayersModel","className","onLoad","load","id","onContextMenu","preventDefault","style","position","top","left","border","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77decff5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst tf = require('@tensorflow/tfjs');\nconst buildPath = (false) ? \"http://localhost:3000/FlagCNN\"  : \"https://TivsLThree.github.io/FlagCNN/\";\nconst names = [\"australia\",\"canada\",\"china\",\"cuba\",\"japan\",\"malaysia\",\"monaco\",\"peru\",\"poland\",\"singapore\",\"usa\",\"vietnam\"];\nclass App extends React.Component {\n  constructor(){\n    super()\n        this.state = {guess: \"Start drawing a flag and I'll try to guess it!\"};\n  }\n  componentWillUnmount() {\n\n  }\ncomponentDidMount() {\n  this.loadModel();\n    //this.guess = null;\n    this.old = \"\";\n    this.bool = false;\n    this.canvas = false; this.ctx = false; this.flag = false;\n        this.prevX = 0;\n        this.currX = 0;\n        this.prevY = 0;\n        this.currY = 0;\n        this.dot_flag = false;\n        this.boxSize = 40;\n    this.x = \"white\";\n        this.y = 2;\n    this.model = null;\n    this.weights = null;\n    this.canvas = document.getElementById('can');\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    this.canvas2 = document.getElementById('can2');\n    this.ctx2 = this.canvas2.getContext(\"2d\");\n    this.w = this.canvas.width;\n    this.h = this.canvas.height;\n    this.ctx.fillStyle = \"rgba(255,255,255,255)\";\n    this.ctx.fillRect(0,0,this.w,this.h);\n    this.ctx2.fillStyle = \"rgba(255,255,255,255)\";\n    this.ctx2.fillRect(0,0,this.w,this.h);\n    this.canvas.addEventListener('mousedown', this.handleClick);\n    this.canvas.addEventListener('mouseup', this.handleRelease)\n    this.canvas.addEventListener('mousemove', this.draw);\n    this.canvas.addEventListener('mouseout', this.handleRelease);\n    this.canvas2.addEventListener('mouseup', this.pickColor)\n    this.canvas2.addEventListener('mousedown', this.pickColor)\n\n    var x = this.canvas2.width / 2;\n    var y = this.canvas2.height / 2;\n    var radius = 32;\n    var counterClockwise = false;\n\n    for(var angle=0; angle<=360; angle+=1){\n      var startAngle = (angle-2)*Math.PI/180;\n      var endAngle = angle * Math.PI/180;\n      this.ctx2.beginPath();\n      this.ctx2.moveTo(x, y);\n      this.ctx2.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n      this.ctx2.closePath();\n      this.ctx2.fillStyle = 'hsl('+angle+', 100%, 50%)';\n      this.ctx2.fill();\n    }\n  }\n\n  pickColor = (e) =>\n  {\n    var pd = this.ctx2.getImageData(e.offsetX, e.offsetY, 1, 1).data;\n    this.x = `rgba(${pd[0]},${pd[1]},${pd[2]},255)`\n  }\n\n  handleClick =(e)=> {\n    if(e.button == 2)\n    {\n      this.old = this.x;\n      this.x = `rgba(255,255,255,255)`\n    }\n    if(e.shiftKey && e.button != 2)\n    {\n      var pd = this.ctx.getImageData(e.offsetX, e.offsetY, 1, 1).data;\n      this.x = `rgba(${pd[0]},${pd[1]},${pd[2]},255)`\n    } else {\n       this.bool = true\n    }\n   // console.log(e)\n  }\n  handleRelease =(e) =>{\n    if(e.button == 2)\n    {\n      this.x = this.old;\n    }\n    this.bool = false;\n    var res = null;\n    if(this.model != null)\n    {\n      var img = new Image(this.canvas.toDataURL(\"image/png\"));\n      this.ctx.drawImage(img, 0,0);\n      var imgData = this.ctx.getImageData(0,0,this.w,this.h);\n      //console.log(imgData.data[0])\n      img = tf.browser.fromPixels(imgData).resizeBilinear([23,13])\n      img = img.reshape([1,13,23,3])\n      res = this.model.predict(img)\n      var guess = res.dataSync();\n      var index = guess.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\n\n      console.log(names[index])\n     this.setState({guess:names[index]});\n    }\n  }\n  draw=(e) => {\n    if(!this.bool)\n     return;\n    this.ctx.fillStyle = this.x;\n    this.ctx.fillRect(Math.floor(e.offsetX / this.boxSize) * this.boxSize,\n      Math.floor(e.offsetY / this.boxSize) * this.boxSize,\n      this.boxSize, this.boxSize);\n  }\n  //   <div style=\"position:absolute;top:20%;left:83%;\">Eraser</div>\nasync loadModel() {\n  var path = buildPath + \"/resources/model/model.json\";\n  this.model = await tf.loadLayersModel(path);\n}\nrender () {\n\n  return (\n    <div className=\"App\" onLoad = {this.load}>\n    <canvas id=\"can\" width=\"920\" height=\"520\" onContextMenu={(e) => e.preventDefault()} style={{position:\"absolute\",top:\"8%\",left:\"10%\",border:\"2px solid\"}}></canvas>\n    <div>{this.state.guess}</div>\n    <canvas id=\"can2\" width=\"64\" height=\"64\" onContextMenu={(e) => e.preventDefault()} style={{position:\"absolute\",top:\"8%\",left:\"90%\",border:\"2px solid\"}}></canvas>\n\n    <div style={{position:\"absolute\",top:\"15%\",left:\"83%\"}}>Choose Color, Right click to erase.\n\n      <p>Shift-click on a color on the canvas to color pick it, or just click on the color wheel!</p></div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}